-- File auto generated by purescript-bridge! --
module ServerTypes where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

newtype Volunteer =
    Volunteer {
      id :: Int
    , name :: String
    , overnightPreference :: Maybe OvernightPreference
    , overnightGenderPreference :: Maybe OvernightGenderPreference
    , notes :: String
    }

derive instance genericVolunteer :: Generic Volunteer

derive instance newtypeVolunteer :: Newtype Volunteer _


--------------------------------------------------------------------------------
_Volunteer :: Iso' Volunteer { id :: Int, name :: String, overnightPreference :: Maybe OvernightPreference, overnightGenderPreference :: Maybe OvernightGenderPreference, notes :: String}
_Volunteer = _Newtype

--------------------------------------------------------------------------------
newtype Shift =
    Shift {
      date :: Date
    , volunteers :: Array VolunteerShift
    }

derive instance genericShift :: Generic Shift

derive instance newtypeShift :: Newtype Shift _


--------------------------------------------------------------------------------
_Shift :: Iso' Shift { date :: Date, volunteers :: Array VolunteerShift}
_Shift = _Newtype

--------------------------------------------------------------------------------
data OvernightPreference =
    PreferToBeAlone
  | PreferAnotherVolunteer

derive instance genericOvernightPreference :: Generic OvernightPreference


--------------------------------------------------------------------------------
_PreferToBeAlone :: Prism' OvernightPreference Unit
_PreferToBeAlone = prism' (\_ -> PreferToBeAlone) f
  where
    f PreferToBeAlone = Just unit
    f _ = Nothing

_PreferAnotherVolunteer :: Prism' OvernightPreference Unit
_PreferAnotherVolunteer = prism' (\_ -> PreferAnotherVolunteer) f
  where
    f PreferAnotherVolunteer = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data OvernightGenderPreference =
    Male
  | Female

derive instance genericOvernightGenderPreference :: Generic OvernightGenderPreference


--------------------------------------------------------------------------------
_Male :: Prism' OvernightGenderPreference Unit
_Male = prism' (\_ -> Male) f
  where
    f Male = Just unit
    f _ = Nothing

_Female :: Prism' OvernightGenderPreference Unit
_Female = prism' (\_ -> Female) f
  where
    f Female = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Date =
    Date {
      year :: Int
    , month :: Int
    , day :: Int
    }

derive instance genericDate :: Generic Date

derive instance newtypeDate :: Newtype Date _


--------------------------------------------------------------------------------
_Date :: Iso' Date { year :: Int, month :: Int, day :: Int}
_Date = _Newtype

--------------------------------------------------------------------------------
data VolunteerShift =
    Overnight Volunteer
  | Evening Volunteer

derive instance genericVolunteerShift :: Generic VolunteerShift


--------------------------------------------------------------------------------
_Overnight :: Prism' VolunteerShift Volunteer
_Overnight = prism' Overnight f
  where
    f (Overnight a) = Just $ a
    f _ = Nothing

_Evening :: Prism' VolunteerShift Volunteer
_Evening = prism' Evening f
  where
    f (Evening a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
